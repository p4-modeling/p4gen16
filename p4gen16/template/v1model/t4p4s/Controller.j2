#include "controller.h"
#include "messages.h"
#include <time.h>
#include <errno.h>    
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <arpa/inet.h>

controller c;

extern void notify_controller_initialized();

{% for table in this.tables %}
{% if not this.skip_filling_tables %}
void fill_{{ table.name }}(uint{{ table.keys[0].field.required_bytes * 8 }}_t match_1[1]{% for key in table.keys[1:] %}, uint{{ key.field.required_bytes * 8 }}_t match_{{ loop.index + 1 }}[1]{% endfor %})
{
    printf("Entering entry for table {{ table.name }}\n");
    char buffer[2048];
    struct p4_header* h;
    struct p4_add_table_entry* te;
    struct p4_action* a;
    {% for key in table.keys %}
    struct p4_field_match_{{ key.match_kind }}* {{ key.match_kind }}_{{ loop.index }};
    {% endfor %}

    h = create_p4_header(buffer, 0, 2048);
    te = create_p4_add_table_entry(buffer,0,2048);
    strcpy(te->table_name, "{{ table.name }}_0");

    {% for key in table.keys %}
    {{ key.match_kind }}_{{ loop.index }} = add_p4_field_match_{{ key.match_kind }}(te, 2048);
    strcpy({{ key.match_kind }}_{{ loop.index }}->header.name, "{{ key.header.name }}.{{ key.field.name }}");
    memcpy({{ key.match_kind }}_{{ loop.index }}->bitmap, match_{{ loop.index }}, {{ key.field.required_bytes }});
    {{ key.match_kind }}_{{ loop.index }}->length = {{ key.field.required_bytes }} * 8;
    {% endfor %}

    a = add_p4_action(h, 2048);
    strcpy(a->description.name, "{{ table.default_action.name }}");
    // TODO action params

    netconv_p4_header(h);
    netconv_p4_add_table_entry(te);
    {% for key in table.keys %}
    netconv_p4_field_match_{{ key.match_kind }}({{ key.match_kind }}_{{ loop.index }});
    {% endfor %}
    netconv_p4_action(a);

    send_p4_msg(c, buffer, 2048);
}
{% endif %}

void set_default_action_{{ table.name }}()
{
    char buffer[2048];
    struct p4_header* h;
    struct p4_set_default_action* sda;
    struct p4_action* a;

    printf("Generate set_default_action message for table {{ table.name }}\n");

    h = create_p4_header(buffer, 0, sizeof(buffer));

    sda = create_p4_set_default_action(buffer,0,sizeof(buffer));
    strcpy(sda->table_name, "{{ table.name }}_0");

    a = &(sda->action);
    strcpy(a->description.name, "{{ table.default_action.name }}");

    netconv_p4_header(h);
    netconv_p4_set_default_action(sda);
    netconv_p4_action(a);

    send_p4_msg(c, buffer, sizeof(buffer));
}
{% endfor %}

/* usleep(): Sleep for the requested number of microseconds. */
int usleep(long usec)
{
    struct timespec ts;
    int res;

    if (usec < 0)
    {
        errno = EINVAL;
        return -1;
    }

    ts.tv_sec = usec / 1000000;
    ts.tv_nsec = (usec % 1000000) * 1000;

    do {
        res = nanosleep(&ts, &ts);
    } while (res && errno == EINTR);

    return res;
}

void init() {
    printf("Set default actions.\n");
    int i;
    {% for table in this.tables %}
    {% set outer_loop = loop %}
    set_default_action_{{ table.name }}();
    {% if not this.skip_filling_tables %}
    {% for key in table.keys %}
    uint{{ key.field.required_bytes * 8 }}_t match_{{ outer_loop.index }}_{{ loop.index }}[1];{% endfor %}

    for (i = 0; i < {{ table.size }}; i++){
    	printf("Entering entry number %d\n", i);
    	{% for key in table.keys %}
    	match_{{ outer_loop.index }}_{{ loop.index }}[0] = (uint{{ key.field.required_bytes * 8 }}_t) i;{% endfor %}
    	fill_{{ table.name }}(match_{{ outer_loop.index }}_1{% for key in table.keys[1:] %}, match_{{ outer_loop.index }}_{{ loop.index + 1 }}{% endfor %});
    	usleep(500);
    }
    {% endif %}
    {% endfor %}
    notify_controller_initialized();
}

void dhf(void* b) {
    struct p4_header* h = netconv_p4_header(unpack_p4_header(b, 0));
    if (h->type != P4T_DIGEST) {
        printf("Method is not implemented\n");
        return;
    }
}

int main(int argc, char* argv[])
{
    if (argc>1) {
        if (argc!=2) {
            printf("Too many arguments...\nUsage: %s <filename(optional)>\n", argv[0]);
            return -1;
        }
    }

    printf("Create and configure controller...\n");
    c = create_controller_with_init(11111, 3, dhf, init);

    printf("Launching controller's main loop...\n");
    execute_controller(c);

    printf("Destroy controller\n");
    destroy_controller(c);

    return 0;
}
